{"version":3,"sources":["component/Login.js","component/Render.js","component/style/StoryFormstyle.js","component/LetterAdd.js","component/LetterUpdate.js","component/Letters.js","component/LetterEntry.js","App.js","index.js"],"names":["Login","useState","password","setPassword","history","useHistory","className","onSubmit","e","preventDefault","test","msg","alert","localStorage","setItem","push","value","name","onChange","target","placeholder","Render","props","toggle","setToggle","replytoggle","setReplyToggle","updateToggle","setUpdateToggle","reply","setReply","reRending","removeLetter","AiOutlineDelete","BiCommentEdit","letter","LetterUpdate","removeReply","axios","defaults","headers","common","postId","id","split","cmtId","window","confirm","delete","createdAt","toLocaleString","dangerouslySetInnerHTML","__html","_id","onClick","cmt","length","map","t","post","getItem","Date","type","autoComplete","required","EntiryWrapper","styled","div","QuillWrapper","StyleButton","button","LinkR","EditorBlock","LetterAdd","textarea","setTextArea","theme","then","data","console","log","url","put","Letters","setData","refresh","setRefresh","_effectMethod","get","useEffect","res","a","catch","err","Helmet","charSet","LetterEntry","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06d70153.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./Login.css\";\n\nconst Login = () => {\n  const [password, setPassword] = useState(\"\");\n\n  let history = useHistory();\n\n  const handleChange = (e) => {\n    setPassword(e.target.value);\n    //변환할 값(setPassword) = setState\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!password || /^\\s*$/.test(password.msg)) {\n      alert(\"비밀번호를 입력하세요!\");\n      return;\n    } else if (password === \"930921\") {\n      alert(\"너 수빈이구나?\");\n      localStorage.setItem(\"name\", \"수빈\");\n      history.push(\"/letter\");\n    } else if (password === \"890616\") {\n      alert(\"너 병국이구나?\");\n      localStorage.setItem(\"name\", \"병국\");\n      history.push(\"/letter\");\n    } else {\n      alert(\"너 누구얏!\");\n      return;\n    }\n    setPassword(\"\");\n  };\n\n  //일종의 체이닝 나중에 제출한다음에 뭐가 나올껀지?\n  //변환할 값(setpassword) = setState\n  return (\n    <div className=\"wapper\">\n      <form className=\"login-form\" onSubmit={handleSubmit}>\n        <h1>너누구니?</h1>\n        <input\n          className=\"login-input\"\n          value={password}\n          name=\"text\"\n          onChange={handleChange}\n          placeholder=\"비밀번호 알고 있니?\"\n        />\n        <div className=\"wrap\">\n          <button className=\"button\">제출</button>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default Login;\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport './Letters.css';\nimport { FaReplyd } from 'react-icons/fa';\nimport { MdSubdirectoryArrowRight } from 'react-icons/md';\nimport { BiHighlight } from 'react-icons/bi';\n\nconst Render = (props) => {\n  const [toggle, setToggle] = useState(false);\n  const [replytoggle, setReplyToggle] = useState(false);\n  const [updateToggle, setUpdateToggle] = useState(false);\n  const [reply, setReply] = useState('');\n  const {\n    reRending,\n    removeLetter,\n    AiOutlineDelete,\n    BiCommentEdit,\n    letter,\n    LetterUpdate,\n  } = props;\n  //댓글쓰기토글\n  const revisedToggle = () => {\n    setToggle(!toggle);\n  };\n  //댓글토글\n  const replyToggle = () => {\n    setReplyToggle(!replytoggle);\n  };\n  //수정토글\n  const updateLetterToggle = () => {\n    setUpdateToggle(!updateToggle);\n  };\n  const handleReplyChange = (e) => {\n    setReply(e.target.value);\n  };\n  const handleReplySubmit = (e) => {\n    axios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\n    e.preventDefault();\n    if (!reply || /^\\s*$/.test(reply)) {\n      alert('쓸 말이 그렇게 없니 도대체?');\n      return;\n    } else {\n      axios.post(\n        `https://letters-heroku.herokuapp.com/api/comments/${e.target.id}`,\n        {\n          name: localStorage.getItem('name'),\n          cmt: reply,\n          createdAt: new Date().toLocaleString(),\n        }\n      );\n      alert('제출되었습니닷');\n      setReply('');\n      reRending();\n    }\n  };\n  const removeReply = (e) => {\n    axios.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\n    e.preventDefault();\n    let postId = e.target.id.split(',')[0];\n    let cmtId = e.target.id.split(',')[1];\n    if (window.confirm('진짜 댓글 지울꺼야?')) {\n      axios.delete(\n        `https://letters-heroku.herokuapp.com/api/comments/${postId}/${cmtId}`\n      );\n      alert('삭제되었습니닷');\n      reRending();\n    } else {\n      return;\n    }\n  };\n  return (\n    <div className=\"letters-wrapper\">\n      {letter.createdAt.toLocaleString()}\n      <div className=\"letter-author\">\n        {letter.name === '병국'\n          ? `${letter.name}이가 수빈이에게`\n          : `${letter.name}이가 병국이에게`}\n      </div>\n      {\n        <div className=\"letters-content\" key={letter._id}>\n          {!updateToggle ? (\n            <div dangerouslySetInnerHTML={{ __html: letter.msg }} />\n          ) : (\n            <LetterUpdate letter={letter} />\n          )}\n          <div className=\"letters-content-wapper\">\n            <span className=\"letters-content-delete\">\n              <AiOutlineDelete\n                id={letter._id}\n                onClick={(e) => removeLetter(e)}\n              />\n            </span>\n            <span className=\"letters-content-reply\" onClick={replyToggle}>\n              <FaReplyd id={letter._id} />({letter.cmt.length})\n            </span>\n            {replytoggle &&\n              letter.cmt.map((t) => {\n                return (\n                  <div>\n                    <div className=\"letters-reply-wapper\" key={t._id}>\n                      <div className=\"replyTime\">{t.createdAt}</div>\n                      <span className=\"replyComment\">\n                        <MdSubdirectoryArrowRight />\n                        {t.name}\n                      </span>\n                      <div>{t.cmt}</div>\n                      <div className=\"letters-reply-delete\">\n                        <AiOutlineDelete\n                          id={[letter._id, t._id]}\n                          onClick={removeReply}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            <span className=\"letters-content-modify\" onClick={revisedToggle}>\n              <BiCommentEdit />\n            </span>\n            {toggle && (\n              <form\n                className=\"letters-reply-form\"\n                onSubmit={handleReplySubmit}\n                id={letter._id}\n              >\n                <input\n                  onChange={handleReplyChange}\n                  type=\"Text\"\n                  name=\"name\"\n                  autoComplete=\"off\"\n                  value={reply}\n                  placeholder=\"어떤 댓글을 달꺼니?\"\n                  required\n                />\n\n                <button className=\"button\">제출</button>\n              </form>\n            )}\n            <span>\n              <BiHighlight reRending={reRending} onClick={updateLetterToggle} />\n            </span>\n          </div>\n          <div></div>\n        </div>\n      }\n    </div>\n  );\n};\nexport default Render;\n","import styled from \"styled-components\";\nimport { Link as LinkR } from \"react-router-dom\";\n\nexport const EntiryWrapper = styled.div`\n  display: inline;\n`;\nexport const QuillWrapper = styled.div`\n  .ql-toolbar {\n    background: #eaecec;\n    border-top-left-radius: 0.5em;\n    border-top-right-radius: 0.5em;\n  }\n  .ql-container {\n    min-height: 30px;\n    border-bottom-left-radius: 0.5em;\n    border-bottom-right-radius: 0.5em;\n    padding: 0px;\n    font-size: 1.125rem;\n    line-height: 1.5;\n  }\n  .ql-container .ql-blank ::before {\n    left: 0px;\n  }\n`;\nexport const StyleButton = styled.button`\n  border: none;\n  cursor: pointer;\n  outline: none;\n  margin: 0.6rem 0 0;\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  width: 4rem;\n  height: 2.75rem;\n  border-radius: 4px;\n  font-size: 15px;\n  font-weight: 500;\n  font-family: \"맑은 고딕\";\n  color: black;\n  background: #fef019;\n  display: inline-block;\n  text-align: center;\n  line-height: 22px;\n  align-items: left;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    transition: all 0.2s ease-in-out;\n    background: #1c2237;\n    color: #fff;\n  }\n`;\n\nexport const Line = styled.div`\n  border-radius: 5px;\n  background-color: #eaecec;\n  display: block;\n  width: 100%;\n  height: 1px;\n`;\n\nexport const ExplainText = styled.div`\n  font-size: 1.2rem;\n  line-height: 1.8;\n  text-align: left;\n  span {\n    font-size: 1.7rem;\n  }\n`;\n\nexport const GoToLoginBtn = styled(LinkR)`\n  border-radius: 5px;\n  background: #01bf71;\n  height: 20px;\n  max-width: 15%;\n  white-space: nowrap;\n  padding: 10px 22px;\n  color: #010606;\n  font-size: 1rem;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  text-decoration: none;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    transition: all 0.2s ease-in-out;\n    background: #1c2237;\n    color: #fff;\n  }\n`;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./LetterAdd.css\";\nimport styled from \"styled-components\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport {\n  EntiryWrapper,\n  QuillWrapper,\n  StyleButton,\n  Line,\n  GoToLoginBtn,\n  ExplainText,\n} from \"./style/StoryFormstyle\";\nconst EditorBlock = styled.div`\n  padding: 15px;\n  outline: #6eb584; ;\n`;\n\nconst LetterAdd = (props) => {\n  const { reRending } = props;\n  const [textarea, setTextArea] = useState(\"\");\n\n  const handleChange = (textarea) => {\n    setTextArea(textarea);\n    //변환할 값(setTextArea) = setState\n  };\n\n  const url = \"https://letters-heroku.herokuapp.com/api/letters\";\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!textarea || /^\\s*$/.test(textarea.msg)) {\n      alert(\"쓸 말이 그렇게 없니 도대체?\");\n      return;\n    } else {\n      axios\n        .post(url, {\n          name: localStorage.getItem(\"name\"),\n          msg: textarea,\n          createdAt: new Date().toLocaleString(),\n        })\n        .then((data) => {\n          console.log(data);\n          alert(\"제출되었습니닷\");\n          reRending();\n        });\n    }\n\n    setTextArea(\"\");\n    //일종의 체이닝 나중에 제출한다음에 뭐가 나올껀지?\n    //변환할 값(setTextArea) = setState\n  };\n  return (\n    <EntiryWrapper>\n      <EditorBlock className=\"letter-form\">\n        <h2>편지쓰기</h2>\n        <QuillWrapper>\n          <ReactQuill\n            theme=\"snow\"\n            value={textarea}\n            onChange={handleChange}\n            placeholder={\"어떤 말을 쓰고 싶니?\"}\n          />\n        </QuillWrapper>\n        <StyleButton onClick={handleSubmit}>등록</StyleButton>\n      </EditorBlock>\n    </EntiryWrapper>\n    // <form className=\"letter-form\" onSubmit={handleSubmit}>\n    //   <h2>편지쓰기</h2>\n    //   <textarea\n    //     className=\"letter-textarea\"\n    //     type=\"Text\"\n    //     placeholder=\"어떤 말을 쓰고 싶니?\"\n    //     value={textarea}\n    //     name=\"text\"\n    //     onChange={handleChange}\n    //   />\n    //   <div className=\"wrap\">\n    //     <button className=\"button\">제출</button>\n    //   </div>\n    // </form>\n  );\n};\nexport default LetterAdd;\n","import React, { useState } from 'react';\nimport ReactQuill from 'react-quill';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport {\n  EntiryWrapper,\n  QuillWrapper,\n  StyleButton,\n} from './style/StoryFormstyle';\nconst EditorBlock = styled.div`\n  padding: 15px;\n  outline: #6eb584; ;\n`;\nexport const LetterUpdate = (props) => {\n  const { _id, msg } = props.letter;\n  const [textarea, setTextArea] = useState(msg);\n  const handleChange = (textarea) => {\n    setTextArea(textarea);\n    //변환할 값(setTextArea) = setState\n  };\n  const handleSubmit = (e) => {\n    const url = `https://letters-heroku.herokuapp.com/api/letters/${e.target.id}`;\n    e.preventDefault();\n    console.log('dasdasdas', e.target.value);\n    if (!textarea || /^\\s*$/.test(textarea.msg)) {\n      alert('쓸 말이 그렇게 없니 도대체?');\n      return;\n    } else {\n      axios\n        .put(url, {\n          name: localStorage.getItem('name'),\n          msg: textarea,\n          createdAt: new Date().toLocaleString(),\n        })\n        .then((data) => {\n          console.log(data);\n          alert('제출되었습니닷');\n          //reRending();\n        });\n    }\n\n    setTextArea('');\n    //일종의 체이닝 나중에 제출한다음에 뭐가 나올껀지?\n    //변환할 값(setTextArea) = setState\n  };\n  console.log('🚀', props.letter);\n\n  return (\n    <EntiryWrapper>\n      <EditorBlock className=\"letter-form\">\n        <h2>편지 수정하기</h2>\n        <QuillWrapper>\n          <ReactQuill theme=\"snow\" value={textarea} onChange={handleChange} />\n        </QuillWrapper>\n        <StyleButton onClick={handleSubmit} id={_id}>\n          수정\n        </StyleButton>\n      </EditorBlock>\n    </EntiryWrapper>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Letters.css';\nimport Render from './Render';\nimport { IoMdRefresh } from 'react-icons/io';\nimport { AiOutlineDelete } from 'react-icons/ai';\nimport { BiCommentEdit } from 'react-icons/bi';\nimport LetterAdd from './LetterAdd';\nimport { Helmet } from 'react-helmet';\nimport { LetterUpdate } from './LetterUpdate';\nconst Letters = () => {\n  const [data, setData] = useState(null);\n  const [refresh, setRefresh] = useState(false);\n  const _effectMethod = {\n    async _getLetter() {\n      return await axios.get(\n        'https://letters-heroku.herokuapp.com/api/letters'\n      );\n    },\n  };\n  // 화면 시작하자마자 데이터 랜더링하고 시작하기 위해 useEffect 사용\n  useEffect(() => {\n    _effectMethod._getLetter().then((res) => {\n      setData(res.data);\n    });\n  }, [refresh]);\n\n  const removeLetter = async (e) => {\n    const url = `https://letters-heroku.herokuapp.com/api/letters/${e.target.id}`;\n    if (window.confirm('진짜 지울꺼야? 너 편지를 지울꺼니? 진짜로?')) {\n      await axios\n        .delete(url)\n        .then((res) => {\n          alert('지워졌어 나쁜놈아');\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    } else {\n      return;\n    }\n    reRending();\n  };\n  //리렌더\n\n  const reRending = () => {\n    setRefresh(!refresh);\n  };\n\n  return !data ? (\n    <div className=\"letters-wrapper\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>편지쓰기</title>\n      </Helmet>\n      <LetterAdd />\n      <div className=\"letters-content\">\n        편지를 데이터베이스에서 불러오고 있는데 오류가 있으면 안뜰꺼야 새로고침\n        해보렴..{' '}\n        <div className=\"wrap\">\n          <button className=\"button\" onClick={() => reRending()}>\n            <IoMdRefresh />\n          </button>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"letters-wrapper\">\n      <div className=\"versiontag\">v1.1 : Implemented TextEditer</div>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>편지쓰기</title>\n      </Helmet>\n      <LetterAdd reRending={reRending} />\n      {data.map((letter) => {\n        return (\n          <Render\n            letter={letter}\n            reRending={reRending}\n            AiOutlineDelete={AiOutlineDelete}\n            BiCommentEdit={BiCommentEdit}\n            removeLetter={removeLetter}\n            LetterUpdate={LetterUpdate}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Letters;\n","import React from 'react';\nimport Letters from './Letters';\n\nimport '../App.css';\nconst LetterEntry = () => {\n  return (\n    <div className=\"body-warpper\">\n      <Letters />\n    </div>\n  );\n};\nexport default LetterEntry;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Login from \"./component/Login\";\nimport LetterEntry from \"./component/LetterEntry\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/letters_clients\" component={Login} />\n        <Route exact path=\"/Letter\" component={LetterEntry} />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}