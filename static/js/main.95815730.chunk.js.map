{"version":3,"sources":["Component/Letters.js","Component/LetterAdd.js","App.js","reportWebVitals.js","index.js"],"names":["Letters","useAxios","method","url","data","loading","error","refetch","respones","className","class","onClick","map","letter","msg","_id","LetterAdd","useState","textarea","setTextArea","onSubmit","e","preventDefault","test","axios","post","then","console","log","alert","window","location","reload","type","placeholder","value","name","onChange","target","App","Helmet","charSet","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAuCeA,EAlCC,WAAO,IAAD,EACkCC,YAAS,CAC7DC,OAAQ,MACRC,IAAK,qDAHa,0BACXC,EADW,EACXA,KAAMC,EADK,EACLA,QAASC,EADJ,EACIA,MAAmBC,GADvB,EACWC,SADX,MAMpB,OAAOH,GAAWC,EAChB,qBAAKG,UAAU,kBAAf,SACE,sBAAKA,UAAU,kBAAf,yOAEQ,IACN,qBAAKC,MAAM,OAAX,SACE,wBAAQA,MAAM,SAASC,QAASJ,EAAhC,SACE,cAAC,IAAD,aAMR,sBAAKE,UAAU,kBAAf,UACE,qBAAKC,MAAM,OAAX,SACE,wBAAQA,MAAM,SAASC,QAASJ,EAAhC,SACE,cAAC,IAAD,QAGHH,EAAKQ,KAAI,SAACC,GAAD,OACR,qBAAKJ,UAAU,kBAAf,SACGI,EAAOC,KAD4BD,EAAOE,Y,gBCkBtCC,G,MA7CG,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACfC,EADe,KACLC,EADK,KA2BtB,OACE,uBAAMV,UAAU,cAAcW,SAlBX,SAACC,GACpBA,EAAEC,iBACGJ,IAAY,QAAQK,KAAKL,EAASJ,MAIrCU,IAAMC,KARE,mDAQQ,CAAEX,IAAKI,IAAYQ,MAAK,SAACtB,GACvCuB,QAAQC,IAAIxB,GACZyB,MAAM,8CACNC,OAAOC,SAASC,YAIpBb,EAAY,KAVVU,MAAM,4EAeR,UACE,0FACA,0BACEpB,UAAU,kBACVwB,KAAK,OACLC,YAAY,uDACZC,MAAOjB,EACPkB,KAAK,OACLC,SAjCe,SAAChB,GACpBF,EAAYE,EAAEiB,OAAOH,UAmCnB,qBAAKzB,MAAM,OAAX,SACE,wBAAQA,MAAM,SAAd,2B,gBC1BO6B,MAbf,WACE,OACE,sBAAK9B,UAAU,eAAf,UACE,eAAC+B,EAAA,EAAD,WACE,sBAAMC,QAAQ,UACd,gGAEF,cAAC,EAAD,IACA,cAAC,EAAD,QCDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.95815730.chunk.js","sourcesContent":["import React from \"react\";\nimport useAxios from \"axios-hooks\";\nimport \"./Letters.css\";\nimport { IoMdRefresh } from \"react-icons/io\";\n\nconst Letters = () => {\n  const [{ data, loading, error, respones }, refetch] = useAxios({\n    method: \"GET\",\n    url: \"https://letters-heroku.herokuapp.com/api/letters\",\n  });\n\n  return loading || error ? (\n    <div className=\"letters-wrapper\">\n      <div className=\"letters-content\">\n        편지를 데이터베이스에서 불러오고 있는데 오류가 있으면 안뜰꺼야 새로고침\n        해보렴..{\" \"}\n        <div class=\"wrap\">\n          <button class=\"button\" onClick={refetch}>\n            <IoMdRefresh />\n          </button>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div className=\"letters-wrapper\">\n      <div class=\"wrap\">\n        <button class=\"button\" onClick={refetch}>\n          <IoMdRefresh />\n        </button>\n      </div>\n      {data.map((letter) => (\n        <div className=\"letters-content\" key={letter._id}>\n          {letter.msg}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Letters;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./LetterAdd.css\";\n\nconst LetterAdd = () => {\n  const [textarea, setTextArea] = useState(\"\");\n\n  const handleChange = (e) => {\n    setTextArea(e.target.value);\n    //변환할 값(setTextArea) = setState\n  };\n\n  const url = \"https://letters-heroku.herokuapp.com/api/letters\";\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!textarea || /^\\s*$/.test(textarea.msg)) {\n      alert(\"쓸 말이 그렇게 없니 도대체?\");\n      return;\n    } else {\n      axios.post(url, { msg: textarea }).then((data) => {\n        console.log(data);\n        alert(\"제출되었습니닷\");\n        window.location.reload();\n      });\n    }\n\n    setTextArea(\"\");\n    //일종의 체이닝 나중에 제출한다음에 뭐가 나올껀지?\n    //변환할 값(setTextArea) = setState\n  };\n  return (\n    <form className=\"letter-form\" onSubmit={handleSubmit}>\n      <h2>수빈이 한태 편지쓰기</h2>\n      <textarea\n        className=\"letter-textarea\"\n        type=\"Text\"\n        placeholder=\"어떤 말을 쓰고 싶니?\"\n        value={textarea}\n        name=\"text\"\n        onChange={handleChange}\n        //ref={inputRef}\n      />\n      <div class=\"wrap\">\n        <button class=\"button\">Submit</button>\n      </div>\n    </form>\n  );\n};\nexport default LetterAdd;\n","import Letters from \"./Component/Letters\";\nimport LetterAdd from \"./Component/LetterAdd\";\nimport \"./App.css\";\nimport { Helmet } from \"react-helmet\";\n\nfunction App() {\n  return (\n    <div className=\"body-warpper\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>수빈이 한태 편지쓰기</title>\n      </Helmet>\n      <LetterAdd />\n      <Letters />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}